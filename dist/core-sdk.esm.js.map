{"version":3,"file":"core-sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Songbird.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  SGB = 19,\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  ETHEREUM = 'ethereum',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  SGB = 'songbird',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\r\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\r\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: '',\r\n  [ChainId.PALM]: '',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\r\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\r\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\r\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\r\n  [ChainId.SGB]: '0xD7565b16b65376e2Ddb6c71E7971c7185A7Ff3Ff',\r\n}\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\r\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\r\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\r\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\r\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\r\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\r\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\r\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\r\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\r\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\r\n  [ChainId.SGB]:'0x52Fa48DB9E3d27d9e4284Bd18BBE7A4C2830FC1B'\r\n}\r\n\r\nexport const USD_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\r\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\r\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\r\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\r\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\r\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\r\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\r\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\r\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\r\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\r\n  [ChainId.SGB]: USDC_ADDRESS[ChainId.SGB],\r\n}\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\r\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\r\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\r\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\r\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\r\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\r\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\r\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\r\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\r\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\r\n}\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\r\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\r\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\r\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\r\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\r\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\r\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\r\n  [ChainId.SGB]: '0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED',\r\n}\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\r\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\r\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\r\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\r\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\r\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\r\n}\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\r\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\r\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\r\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\r\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\r\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\r\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\r\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\r\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\r\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\r\n}\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\r\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.SGB]:'0xDcA8EfcDe7F6Cb36904ea204bb7FCC724889b55d'\r\n}\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\r\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.SGB]:'0x73E93D9657E6f32203f900fe1BD81179a5bf6Ce4'\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.SGB]:'0xD79998C9ccf02B09d3d0E14097a146ca17575745'\r\n}\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.SGB]:'0x5795377c85e0fdF6370fae1B74Fe03b930C4a892'\r\n}\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.SGB]:'0xCb8257Bf745c194949cA92aCBD7B80D1c1A7a51E'\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\r\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\r\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\r\n}\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\r\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n}\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\r\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\r\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\r\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\r\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\r\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\r\n}\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\r\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\r\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n}\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\r\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\r\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\r\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n}\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n}\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n}\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\r\n}\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\r\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\r\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\r\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\r\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.SGB]:'0x5E281C1a67884c0325278ffA4aE35c19AF8DA4c9'\r\n}\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\r\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\r\n}\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  // [ChainId.ROPSTEN]: '',\r\n  // [ChainId.RINKEBY]: '',\r\n  // [ChainId.GÖRLI]: '',\r\n  // [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\r\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\r\n  // [ChainId.HECO]: '',\r\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\r\n  // [ChainId.OKEX]: '',\r\n  // [ChainId.OKEX_TESTNET]: '',\r\n  // [ChainId.PALM]: '',\r\n  // [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\r\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\r\n}\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\r\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\r\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\r\n  [ChainId.KOVAN]: ChainKey.KOVAN,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.FANTOM]: ChainKey.FANTOM,\r\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\r\n  [ChainId.XDAI]: ChainKey.XDAI,\r\n  [ChainId.BSC]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\r\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\r\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\r\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\r\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\r\n  [ChainId.HECO]: ChainKey.HECO,\r\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\r\n  [ChainId.HARMONY]: ChainKey.HARMONY,\r\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\r\n  [ChainId.OKEX]: ChainKey.OKEX,\r\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\r\n  [ChainId.CELO]: ChainKey.CELO,\r\n  [ChainId.PALM]: ChainKey.PALM,\r\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\r\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\r\n  [ChainId.FUSE]: ChainKey.FUSE,\r\n  [ChainId.TELOS]: ChainKey.TELOS,\r\n  [ChainId.SGB]:ChainKey.SGB\r\n}\r\n","import { ChainId } from '../enums/ChainId'\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\r\n  [ChainId.TELOS]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.SGB]:'0xd2cb536cdbc0fe9cacf5a0424437d5a9246ac7390836813286f13335e6bc0135'\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS, SUSHI_ADDRESS } from './addresses'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { Token } from '../entities/Token'\r\nimport { TokenMap, ChainTokenMap } from '../types'\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\r\n  [ChainId.SGB]: new Token(ChainId.SGB, USD_ADDRESS[ChainId.SGB], 18, 'YUSD', 'YUSD Stablecoin'),\r\n}\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\r\n}\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM'\r\n  ),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  ),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\r\n  [ChainId.MOONRIVER]: new Token(\r\n    ChainId.MOONRIVER,\r\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\r\n    18,\r\n    'WMOVR',\r\n    'Wrapped Moonriver'\r\n  ),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\r\n  [ChainId.SGB]: new Token(ChainId.SGB, WNATIVE_ADDRESS[ChainId.SGB], 18, 'WSGB', 'Wrapped Songbird'),\r\n}\r\n\r\nexport const SUSHI: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.SGB]: new Token(ChainId.SGB, SUSHI_ADDRESS[ChainId.SGB], 18, 'ORACLE', 'OracleSwap.io'),\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class SGB extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'SGB', 'Songbird')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: SGB } = {}\r\n\r\n  public static onChain(chainId: number): SGB {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new SGB(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Harmony,\r\n  Heco,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Palm,\r\n  xDai,\r\n  Telos,\r\n  SGB,\r\n} from '../entities/Native'\r\nimport { NativeMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\r\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\r\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\r\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\r\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\r\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\r\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\r\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\r\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\r\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\r\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\r\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\r\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\r\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\r\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\r\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\r\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\r\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\r\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\r\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\r\n  [ChainId.SGB]: SGB.onChain(ChainId.SGB),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { RoundingMode } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport { computePairAddress } from '../functions/computePairAddress'\r\nimport invariant from 'tiny-invariant'\r\nimport { sqrt } from '../functions/math'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      'OLP',\r\n      'OracleSwap LP Token'\r\n    )\r\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\r\n      })\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","SGB","USDC_ADDRESS","USD_ADDRESS","WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","DAI_ADDRESS","USDT_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","USD","WETH9","WNATIVE","SUSHI","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}